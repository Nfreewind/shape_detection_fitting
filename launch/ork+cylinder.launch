<?xml version="1.0"?>
<launch>
	<arg name="cloud_in" default="cylinders_pcl"/>
	<arg name="clusters_in" default="/tabletop/clusters"/>
	<arg name="rviz_file" default="cylinders.rviz"/>
	<!-- Choose between RGB-D and stereo -->      
	<arg name="stereo"          default="false"/>

  	<arg name="file_name" default="2017-02-01-18-45-50.bag"/>
	<!--<node pkg="rosbag" type="play" name="player" output="screen" args="$(find active_semantic_mapping)/data/$(arg file_name)"/>--> 
	<!-- RDBD camera -->
	<include file="$(find openni2_launch)/launch/openni2.launch">
		<arg name="depth_registration" value="true"/>
	</include>

	<arg name="cfg"                     default="" /> <!-- To change RTAB-Map's parameters, set the path of config file (*.ini) generated by the standalone app -->
	<arg name="frame_id"                default="camera_link"/>     <!-- Fixed frame id, you may set "base_link" or "base_footprint" if they are published -->
	<arg name="namespace"               default="rtabmap"/>
	<arg name="database_path"           default="~/.ros/rtabmap.db"/>
	<arg name="queue_size"              default="10"/>
	<arg name="wait_for_transform"      default="0.2"/>
	<arg name="rtabmap_args"            default=""/>              <!-- delete_db_on_start, udebug -->
	<arg name="launch_prefix"           default=""/>              <!-- for debugging purpose, it fills launch-prefix tag of the nodes -->
	<arg name="approx_sync"             default="true"/>         <!-- if timestamps of the input topics are not synchronized -->



	<!-- RGB-D related topics -->
	<arg name="rgb_topic"               default="/camera/rgb/image_rect_color" />
	<arg name="depth_topic"             default="/camera/depth_registered/image_raw" />
	<arg name="camera_info_topic"       default="/camera/rgb/camera_info" />
	<arg name="camera_cloud_topic"       default="/camera/depth_registered/points" /> 
	<arg name="tabletop_clusters_topic"       default="/tabletop/clusters" /> 
	<!-- stereo related topics -->
	<arg name="stereo_namespace"        default="/stereo_camera"/>
	<arg name="left_image_topic"        default="$(arg stereo_namespace)/left/image_rect_color" />
	<arg name="right_image_topic"       default="$(arg stereo_namespace)/right/image_rect" />      <!-- using grayscale image for efficiency -->
	<arg name="left_camera_info_topic"  default="$(arg stereo_namespace)/left/camera_info" />
	<arg name="right_camera_info_topic" default="$(arg stereo_namespace)/right/camera_info" />

	<arg name="compressed"              default="false"/>         <!-- If you want to subscribe to compressed image topics -->
		                                                <!-- For depth_topic, "compressedDepth" image_transport is used. --> 
		                                                <!-- For rgb_topic, see "rgb_image_transport" argument. -->
	<arg name="rgb_image_transport"     default="compressed"/>    <!-- Common types: compressed, theora (see "rosrun image_transport list_transports") -->

	<arg name="subscribe_scan"          default="false"/>
	<arg name="scan_topic"              default="/scan"/>

	<arg name="subscribe_scan_cloud"    default="false"/>
	<arg name="scan_cloud_topic"        default="/scan_cloud"/>

	<arg name="visual_odometry"         default="true"/>          <!-- Launch rtabmap visual odometry node -->
	<arg name="odom_topic"              default="/odom"/>         <!-- Odometry topic used if visual_odometry is false -->
	<arg name="odom_args"               default="$(arg rtabmap_args)"/>

	<!-- These arguments should not be modified directly, see referred topics without "_relay" suffix above -->
	<arg if="$(arg compressed)"     name="rgb_topic_relay"           default="$(arg rgb_topic)_relay"/>
	<arg unless="$(arg compressed)" name="rgb_topic_relay"           default="$(arg rgb_topic)"/>
	<arg if="$(arg compressed)"     name="depth_topic_relay"         default="$(arg depth_topic)_relay"/>
	<arg unless="$(arg compressed)" name="depth_topic_relay"         default="$(arg depth_topic)"/>
	<arg if="$(arg compressed)"     name="left_image_topic_relay"    default="$(arg left_image_topic)_relay"/>
	<arg unless="$(arg compressed)" name="left_image_topic_relay"    default="$(arg left_image_topic)"/>
	<arg if="$(arg compressed)"     name="right_image_topic_relay"   default="$(arg right_image_topic)_relay"/>
	<arg unless="$(arg compressed)" name="right_image_topic_relay"   default="$(arg right_image_topic)"/>


	<!-- RGB-D Odometry -->
	<group unless="$(arg stereo)">
		<node if="$(arg compressed)" name="republish_rgb" type="republish" pkg="image_transport" args="$(arg rgb_image_transport) in:=$(arg rgb_topic) raw out:=$(arg rgb_topic_relay)" />
		<node if="$(arg compressed)" name="republish_depth" type="republish" pkg="image_transport" args="compressedDepth in:=$(arg depth_topic) raw out:=$(arg depth_topic_relay)" />

		<node if="$(arg visual_odometry)" pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen" args="$(arg odom_args)" launch-prefix="$(arg launch_prefix)">
			<remap from="rgb/image"       to="$(arg rgb_topic_relay)"/>
			<remap from="depth/image"     to="$(arg depth_topic_relay)"/>
			<remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
			  
			<param name="frame_id"                    type="string" value="$(arg frame_id)"/>
			<param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
			<param name="approx_sync"                 type="bool"   value="$(arg approx_sync)"/>
			<param name="config_path"                 type="string" value="$(arg cfg)"/>
			<param name="queue_size"                  type="int" value="$(arg queue_size)"/>
		</node>
	</group>

		<!-- Stereo Odometry -->
		<group if="$(arg stereo)">
		<node if="$(arg compressed)" name="republish_left"  type="republish" pkg="image_transport" args="compressed in:=$(arg left_image_topic) raw out:=$(arg left_image_topic_relay)" />
		<node if="$(arg compressed)" name="republish_right" type="republish" pkg="image_transport" args="compressed in:=$(arg right_image_topic) raw out:=$(arg right_image_topic_relay)" />

		<node if="$(arg visual_odometry)" pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen" args="$(arg odom_args)" launch-prefix="$(arg launch_prefix)">
			<remap from="left/image_rect"        to="$(arg left_image_topic_relay)"/>
			<remap from="right/image_rect"       to="$(arg right_image_topic_relay)"/>
			<remap from="left/camera_info"       to="$(arg left_camera_info_topic)"/>
			<remap from="right/camera_info"      to="$(arg right_camera_info_topic)"/>
			  
			<param name="frame_id"                    type="string" value="$(arg frame_id)"/>
			<param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
			<param name="approx_sync"                 type="bool"   value="$(arg approx_sync)"/>
			<param name="config_path"                 type="string" value="$(arg cfg)"/>
			<param name="queue_size"                  type="int" value="$(arg queue_size)"/>
		</node>
	</group>





	<!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
	<node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
	<node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
		<remap from="~input" to="/camera/depth/points" />
		<rosparam file="$(find active_semantic_mapping)/config/config.yaml" command="load" />
	</node>



  	<!-- ORK Tabletop segmentation -->
  	<node pkg="object_recognition_core" type="detection" name="object_detector" args="-c $(find active_semantic_mapping)/config/detection.table.ros.ork" respawn="true"/>

	<!-- Cylinder segmentation -->
	<include file="$(find active_semantic_mapping)/launch/cylinder_segmentation.launch">
  		<arg name="cloud_in" value="$(arg cloud_in)"/>
  		<arg name="clusters_in" value="$(arg clusters_in)"/>
	</include>  

	<!-- Visualization -->
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find active_semantic_mapping)/rviz/$(arg rviz_file)"/>
</launch>
